# FENull returnNull LIB_EWS_IT.updateOutputTable_IT;
# RETURN VALUE: FENull      -
# EFFETCS:      -           updateAnalyticaltable
# Param1:       FEInstance      analysisUnit instance id

DEBUGMESSAGE("LIB_EWS_IT.updateOutputTable_IT.fe"); # stacktrace


VAR analysisUnitID = Param1;

VAR analysisUnitInstance = Analysis_Unit[ID=$analysisUnitID];

VAR WORKSPACE_PLAN_LIST;
VAR UNIT_TABLE;
VAR BR;
VAR BR_LIST = {};
var fatsTrack;

VAR noneScore;
VAR conditionForSingleCategoricalScore;
var tableFT;
VAR array = {};
VAR expressionSQLQuery;

VAR VARIABLES;
VAR columns = {};
VAR CREATED;
VAR SQL;
VAR ERROR_SQL;
VAR COUNTER = 1;
VAR NOME_COLONNA = NULL;


VAR DBCONNECTION 			= Properties_Predictive[ID="PREDICTIVE_PROPERTIES"].PredictiveDatasourceName;
VAR T_OUT_TMP 			= analysisUnitInstance.ResultTableName+"_TMP";
VAR T_OUT_BCK 			= analysisUnitInstance.ResultTableName+"_BCK";
VAR T_OUT 				= analysisUnitInstance.ResultTableName+"_CALC";
VAR T_OUT_VIEW 			= analysisUnitInstance.ResultTableName;
VAR typeOfDataToUse 		= "actual";
VAR externalInfoFormula 	= analysisUnitInstance.CustomerInfoFormula;

VAR SETUP = EVAL(externalInfoFormula, {analysisUnitInstance});
VAR HAVE_ERROR_MESSAGE 	= SETUP["HAVE_ERROR_MESSAGE"];

UNIT_TABLE 	= analysisUnitInstance.AnalyticalTable;
# RECUPERO LA MATRICE IN PROD
WORKSPACE_PLAN_LIST =  analysisUnitInstance.Workspace_AnalysisUnit.Workspace.Workspace_Plan[Status="Production"];
VARIABLES 	= analysisUnitInstance.AnalysisUnit_Variable.Variable order by [ColumnName ASC];

IF(SIZE (WORKSPACE_PLAN_LIST ) == 0) {
	RETURN;
}
VAR SQL_UNION = "SELECT * FROM (";

FOREACH ( WORKSPACE_PLAN_LIST as WORKSPACE ){

	LIB_DB.DropTableIfExists("TMP_OUTWP_"+WORKSPACE.ID,DBCONNECTION);   
    SQLEXECUTE("CREATE TABLE TMP_OUTWP_"+WORKSPACE.ID+" AS ( "+  LIB_EWS.getQueryOutputForWorkplace(WORKSPACE) +" ) WITH DATA PRIMARY INDEX(SNDG)",DBCONNECTION,NULL,{});
        
	SQL_UNION = SQL_UNION +" SELECT * FROM TMP_OUTWP_"+WORKSPACE.ID;
	SQL_UNION = SQL_UNION + " UNION ALL ";
	
	fatsTrack = WORKSPACE.WorkspacePlan_FastTrack.Fast_Track;
    if(fatsTrack <> null) {
        BR = fatsTrack.FastTrack_BusinessRule.Business_Rule order by [NAME];
        conditionForSingleCategoricalScore = fatsTrack.FastTrack_Score.[Categorical_Score.ID,ExpressionQuery] ORDER BY [Categorical_Score.OrderPosition];
        
        FOREACH (BR as tmp){
            if (not CONTAINSVALUE(BR_LIST, tmp)){
                ADDELEMENT(BR_LIST,tmp);
            }
        }    
    
        var BR_DETAIL = "CASE ";
        foreach (conditionForSingleCategoricalScore as cs){
            # obtaining SQL query
            BR_DETAIL = BR_DETAIL +" when TMP.CATEGORICAL_SCORE = '"+cs[0]+"' THEN '"+TEXTFILETOSTRING(cs[1])+"' ";
            expressionSQLQuery = LIB_BRJson.getSQLquery(TEXTFILETOSTRING(cs[1]));
            ADDELEMENT(array, {cs[0], expressionSQLQuery});

        }
    
        BR_DETAIL = BR_DETAIL+" END ";
    }
}
SQL_UNION = SUBSTRING(SQL_UNION, 0, LENGTH(SQL_UNION) - 10);
SQL_UNION = SQL_UNION + " ) t";

VAR SQL_CALCOLO = "SELECT tmp.* ";
VAR SELECT_VIEW = "SELECT "+UNIT_TABLE+".SNDG as SNDG_JOIN ";

foreach (VARIABLES as v){
 	IF( v.ColumnName <> "TARGET" and v.ColumnName <> "EXPOSURE" and v.ColumnName <> "SNDG" and v.ColumnName <> "SEGMENT"){
		IF(v.Variable_DataType.Data_Type.ID == "STRING") {
			SELECT_VIEW = SELECT_VIEW +",cast("+UNIT_TABLE+"."+v.ColumnName+" as VARCHAR(50) ) as "+v.ColumnName ;
		}
		IF(v.Variable_DataType.Data_Type.ID == "REAL") {
			SELECT_VIEW = SELECT_VIEW +",cast( (CASE WHEN "+UNIT_TABLE+"."+v.ColumnName+" = -8888888 THEN NULL else  "+UNIT_TABLE+"."+v.ColumnName+" END) as DECIMAL(30,6) ) as "+v.ColumnName ;
		}
        if(HAVE_ERROR_MESSAGE) {
			SELECT_VIEW = SELECT_VIEW +",CAST("+UNIT_TABLE+".ERROR_MSG_"+v.ColumnName+" AS VARCHAR(200) ) as ERROR_MSG_" +v.ColumnName;
        }
	}
}
SELECT_VIEW = SELECT_VIEW + " FROM "+UNIT_TABLE+" "+UNIT_TABLE;



COUNTER = 1;
VAR brName;
VAR INDEX ;

foreach (BR_LIST as b){
	INDEX = INDEXOF(b.NAME,'_');
	brName = SUBSTRING(b.NAME,2,INDEX-2);
	NOME_COLONNA = "BR0000"+brName;
	IF(brName == '01' OR brName == '03' OR brName == '04' OR  brName == '05' OR brName == '09') THEN {
		SQL_CALCOLO = SQL_CALCOLO +" ,GREATEST( CASE WHEN "+b.SqlQuery+"then 1 ELSE 0 END,"+NOME_COLONNA+"BIS,"+NOME_COLONNA+"TER ) as "+  NOME_COLONNA ;
	}
	ELSE IF(brName == '08') THEN {
		SQL_CALCOLO = SQL_CALCOLO +" ,GREATEST(CASE WHEN "+b.SqlQuery+"then 1 ELSE 0 END,"+NOME_COLONNA+"BIS) as "+  NOME_COLONNA ;
		
	}
	ELSE IF(brName == '12') THEN {
	SQL_CALCOLO = SQL_CALCOLO +" ,GREATEST(CASE WHEN "+b.SqlQuery+"then 1 ELSE 0 END,"+NOME_COLONNA+"TER) as "+  NOME_COLONNA ;
	}
	else
		SQL_CALCOLO = SQL_CALCOLO +" ,(CASE WHEN "+b.SqlQuery+"then 1 ELSE 0 END ) as "+  NOME_COLONNA ;
	
	
	#COUNTER = COUNTER + 1 ;
}
SQL_CALCOLO = SQL_CALCOLO +" ,CAST(null as VARCHAR(50)) as WARNING_APP ";
SQL_CALCOLO = SQL_CALCOLO +" ,CAST("+BR_DETAIL+" AS VARCHAR(3000) ) as BR_DETAILS  ";
SQL_CALCOLO = SQL_CALCOLO +" ,CAST( TMP.SEMAFORO_APP as VARCHAR(50)) as COLOR_APP ";
SQL_CALCOLO =  SQL_CALCOLO +",COLOR_APP as COLOR_SYSTEM";
SQL_CALCOLO = SQL_CALCOLO +" ,CURRENT_DATE AS CREATION_DATE";
SQL_CALCOLO = SQL_CALCOLO +" FROM  "+UNIT_TABLE+" "+UNIT_TABLE ;
SQL_CALCOLO = SQL_CALCOLO +"  JOIN  ("+ SQL_UNION+") TMP on "+UNIT_TABLE+".SNDG = TMP.SNDG";


IF(LIB_DB.isTableExisting(T_OUT_TMP,DBCONNECTION)) THEN{
    SQLEXECUTE("DROP TABLE "+ T_OUT_TMP,DBCONNECTION,NULL,{});
}
    
SQL_CALCOLO = "CREATE TABLE "+T_OUT_TMP+" AS ( "+ SQL_CALCOLO+" ) WITH DATA PRIMARY INDEX(SNDG)";
SQLEXECUTE(SQL_CALCOLO,DBCONNECTION,NULL,{});
    
CREATED = LIB_DB.isTableExistingAndHavingData(T_OUT_TMP, DBCONNECTION);
    
IF(CREATED) THEN {
    IF(LIB_DB.isTableExisting(T_OUT_BCK,DBCONNECTION)) THEN    {
        SQLEXECUTE("DROP TABLE "+T_OUT_BCK,DBCONNECTION,NULL,{});
    }
    IF(LIB_DB.isTableExisting(T_OUT,DBCONNECTION)) THEN    {
        LIB_DB.renameTable(T_OUT,T_OUT_BCK,DBCONNECTION,NULL);
    }
       
    LIB_DB.renameTable(T_OUT_TMP,T_OUT,DBCONNECTION,NULL);
      
	SQL = "REPLACE VIEW "+T_OUT_VIEW+" AS (
			SELECT * 
			FROM "+T_OUT +" "+T_OUT+ " 
				JOIN (" +SELECT_VIEW+ ") " + UNIT_TABLE +" 
				ON "+ UNIT_TABLE+".SNDG_JOIN = "+T_OUT+".SNDG
			)";
	
	 SQLEXECUTE(SQL,DBCONNECTION,NULL,{});
	
	return NOW();
    
}
return null;

