# FENull returnNull LIB_EWS_IT.updateOutputTable_IT;
# RETURN VALUE: FENull      -
# EFFETCS:      -           updateAnalyticaltable
# Param1:       FEInstance      analysisUnit instance id

DEBUGMESSAGE("LIB_EWS_IT.updateOutputTable_IT.fe"); # stacktrace


VAR analysisUnitID = Param1;

VAR analysisUnitInstance = Analysis_Unit[ID=$analysisUnitID];

VAR WORKSPACE_PLAN_LIST;
VAR MATRIX_TABLE = "MATRIX";
VAR BM_TABLE = "BM";
VAR UNIT_TABLE;
VAR BR;
VAR BR_LIST = {};
var fatsTrack;

VAR noneScore;
VAR conditionForSingleCategoricalScore;
var tableFT;
VAR array = {};
VAR expressionSQLQuery;

VAR VARIABLES;
VAR columns = {};
VAR CREATED;
VAR SQL;
VAR ERROR_SQL;
VAR COUNTER = 1;
VAR NOME_COLONNA = NULL;
VAR SQL_UNION_MATRIX;
VAR SQL_UNION_BM;

VAR DBCONNECTION 		= Properties_Predictive[ID="PREDICTIVE_PROPERTIES"].PredictiveDatasourceName;
VAR T_OUT_TMP 			= analysisUnitInstance.ResultTableName+"_TMP";
VAR T_OUT_BCK 			= analysisUnitInstance.ResultTableName+"_BCK";
VAR T_OUT 				= analysisUnitInstance.ResultTableName+"_CALC";
VAR T_OUT_VIEW 			= analysisUnitInstance.ResultTableName;
VAR typeOfDataToUse 	= "actual";
VAR externalInfoFormula = analysisUnitInstance.CustomerInfoFormula;

VAR SETUP = EVAL(externalInfoFormula, {analysisUnitInstance});
VAR HAVE_ERROR_MESSAGE 	= SETUP["HAVE_ERROR_MESSAGE"];

UNIT_TABLE 	= analysisUnitInstance.AnalyticalTable;
VARIABLES 	= analysisUnitInstance.AnalysisUnit_Variable.Variable order by [ColumnName ASC];

# RECUPERO LA MATRICE IN PROD
WORKSPACE_PLAN_LIST =  analysisUnitInstance.Workspace_AnalysisUnit.Workspace.Workspace_Plan[Status="Production"];

IF(SIZE (WORKSPACE_PLAN_LIST ) == 0) {
	RETURN;
}



FOREACH ( WORKSPACE_PLAN_LIST as WORKSPACE ){
	
	fatsTrack = WORKSPACE.WorkspacePlan_FastTrack.Fast_Track;
    
	BR = fatsTrack.FastTrack_BusinessRule.Business_Rule order by [NAME];
    
    FOREACH (BR as tmp){
    	if (not CONTAINSVALUE(BR_LIST, tmp)){
        	ADDELEMENT(BR_LIST,tmp);
        }
    }    
    
    SQL_UNION_MATRIX = SQL_UNION_MATRIX + " SELECT * FROM "+WORKSPACE.ResultTableName;
    SQL_UNION_MATRIX = SQL_UNION_MATRIX + " UNION ALL";
	
	
	conditionForSingleCategoricalScore = Categorical_Score[IsFastTrackCategory=TRUE].[ID]  ORDER BY [OrderPosition];
	noneScore = conditionForSingleCategoricalScore[SIZE(conditionForSingleCategoricalScore)-1][0];
	
	if (fatsTrack <> NULL) {
		conditionForSingleCategoricalScore = fatsTrack.FastTrack_Score.[Categorical_Score.ID,ExpressionQuery] ORDER BY [Categorical_Score.OrderPosition];
	}
	noneScore = conditionForSingleCategoricalScore[SIZE(conditionForSingleCategoricalScore)-1][0];
	
	array =  FastTrack.getCategoricalScoreInfo(fatsTrack.ID);
	var BR_DETAIL = "CASE ";
	foreach (conditionForSingleCategoricalScore as cs){
		if (fatsTrack <> NULL) {
			# obtaining SQL query
           	BR_DETAIL = BR_DETAIL +" when "+BM_TABLE+".CATEGORICAL_SCORE = '"+cs[0]+"' THEN '"+TEXTFILETOSTRING(cs[1])+"' ";
			}
		}

    BR_DETAIL = BR_DETAIL+" END ";
	tableFT = "(" + LIB_AnalysisUnit.getDecisionListCalculationQuery(array, analysisUnitInstance, typeOfDataToUse, WORKSPACE.Workspace.ID) + ")";
	
	
	SQL_UNION_BM  = SQL_UNION_BM +" "+ tableFT;
	SQL_UNION_BM = SQL_UNION_BM + " UNION ALL";
	
}


SQL_UNION_MATRIX = SUBSTRING(SQL_UNION_MATRIX, 0, LENGTH(SQL_UNION_MATRIX) - 10);
SQL_UNION_BM = SUBSTRING(SQL_UNION_BM, 0, LENGTH(SQL_UNION_BM) - 10);

SQL = "SELECT "+UNIT_TABLE+".SNDG AS SNDG_JOIN";

foreach (VARIABLES as v){
 	IF( v.ColumnName <> "TARGET" and v.ColumnName <> "EXPOSURE" and v.ColumnName <> "SNDG" and v.ColumnName <> "SEGMENT"){
		IF(v.Variable_DataType.Data_Type.ID == "STRING") {
			SQL = SQL +",cast("+UNIT_TABLE+"."+v.ColumnName+" as VARCHAR(50) ) as "+v.ColumnName ;
		}
		IF(v.Variable_DataType.Data_Type.ID == "REAL") {
			SQL = SQL +",cast("+UNIT_TABLE+"."+v.ColumnName+" as NUMBER ) as "+v.ColumnName ;
		}
        if(HAVE_ERROR_MESSAGE) {
			ERROR_SQL = ERROR_SQL +",CAST("+UNIT_TABLE+".ERROR_MSG_"+v.ColumnName+" AS VARCHAR(200) ) as ERROR_MSG_" +v.ColumnName;
        }
	}
}

SQL = SQL + ERROR_SQL;
SQL = SQL + " FROM "+ UNIT_TABLE;

VAR SQL_CALCOLO = "SELECT "+UNIT_TABLE+".SNDG ";


COUNTER = 1;
VAR brName;
VAR INDEX ;
foreach (BR_LIST as b){
	INDEX = INDEXOF(b.NAME,'_');
	brName = SUBSTRING(b.NAME,2,INDEX-2);
	NOME_COLONNA = "BR0000"+brName;
	IF(brName == '01' OR brName == '03' OR brName == '04' OR  brName == '05' OR brName == '09') THEN {
		SQL_CALCOLO = SQL_CALCOLO +" ,GREATEST( CASE WHEN "+b.SqlQuery+"then 1 ELSE 0 END,"+NOME_COLONNA+"BIS,"+NOME_COLONNA+"TER ) as "+  NOME_COLONNA ;
	}
	ELSE IF(brName == '08') THEN {
		SQL_CALCOLO = SQL_CALCOLO +" ,GREATEST(CASE WHEN "+b.SqlQuery+"then 1 ELSE 0 END,"+NOME_COLONNA+"BIS) as "+  NOME_COLONNA ;
		
	}
	ELSE IF(brName == '12') THEN {
	SQL_CALCOLO = SQL_CALCOLO +" ,GREATEST(CASE WHEN "+b.SqlQuery+"then 1 ELSE 0 END,"+NOME_COLONNA+"TER) as "+  NOME_COLONNA ;
	}
	else
		SQL_CALCOLO = SQL_CALCOLO +" ,(CASE WHEN "+b.SqlQuery+"then 1 ELSE 0 END ) as "+  NOME_COLONNA ;
	
	
	#COUNTER = COUNTER + 1 ;
}
VAR TMP;
TMP = BM_TABLE+".CATEGORICAL_SCORE";

SQL_CALCOLO = SQL_CALCOLO +" ,CAST(null as VARCHAR(50)) as WARNING_APP ";
SQL_CALCOLO = SQL_CALCOLO +" ,CAST("+BR_DETAIL+" AS VARCHAR(3000) ) as BR_DETAILS  ";
SQL_CALCOLO = SQL_CALCOLO +" ,CAST( "+LIB_EWS.getSqlDecodeColors(TMP)+" as VARCHAR(50)) as COLOR_APP ";
#SQL = SQL +",CAST(null as VARCHAR(50)) as WARNING_SYSTEM";

#SQL = SQL +",CAST(null as VARCHAR(50)) as COLOR_SYSTEM";
SQL_CALCOLO =  SQL_CALCOLO +",COLOR_APP as COLOR_SYSTEM";

SQL_CALCOLO = SQL_CALCOLO +" ,CURRENT_DATE AS CREATION_DATE";
SQL_CALCOLO = SQL_CALCOLO +" FROM  ("+SQL_UNION_BM+") "+BM_TABLE ;
SQL_CALCOLO = SQL_CALCOLO + " JOIN ("+UNIT_TABLE+") on "+UNIT_TABLE+".SNDG = "+BM_TABLE+".SNDG";
#SQL = SQL +" JOIN ("+SQL_UNION_MATRIX+" ) "+MATRIX_TABLE+ "  ON "+MATRIX_TABLE+".SNDG="+UNIT_TABLE+".SNDG";
#SQL = SQL +" JOIN ("+SQL_UNION_BM+") "+BM_TABLE+ "  ON "+BM_TABLE+".SNDG="+UNIT_TABLE+".SNDG";

 

IF(LIB_DB.isTableExisting(T_OUT_TMP,DBCONNECTION)) THEN{
    SQLEXECUTE("DROP TABLE "+ T_OUT_TMP,DBCONNECTION,NULL,{});
}
    
SQL_CALCOLO = "CREATE TABLE "+T_OUT_TMP+" AS ( "+ SQL_CALCOLO+" ) WITH DATA PRIMARY INDEX(SNDG)";
SQLEXECUTE(SQL_CALCOLO,DBCONNECTION,NULL,{});
    
CREATED = LIB_DB.isTableExistingAndHavingData(T_OUT_TMP, DBCONNECTION);
    
IF(CREATED) THEN {
    IF(LIB_DB.isTableExisting(T_OUT_BCK,DBCONNECTION)) THEN    {
        SQLEXECUTE("DROP TABLE "+T_OUT_BCK,DBCONNECTION,NULL,{});
    }
    IF(LIB_DB.isTableExisting(T_OUT,DBCONNECTION)) THEN    {
        LIB_DB.renameTable(T_OUT,T_OUT_BCK,DBCONNECTION,NULL);
    }
       
    LIB_DB.renameTable(T_OUT_TMP,T_OUT,DBCONNECTION,NULL);
      
	SQL = "REPLACE VIEW "+T_OUT_VIEW+" AS (
			SELECT * FROM "+T_OUT +" "+T_OUT+ " 
				JOIN (" +SQL+ ") " + UNIT_TABLE +" 
				ON "+ UNIT_TABLE+".SNDG_JOIN = "+T_OUT+".SNDG 
			)";
	
	 SQLEXECUTE(SQL,DBCONNECTION,NULL,{});
	
	return NOW();
    
}
return null;
