VAR formulaName = "[LIB_AnalysisUnit.calculateMatrix] ";
DEBUGMESSAGE(formulaName, "START");

var matrix = Param1;
var fastTrack = Param2;
VAR dataToUse = Param3;

var configuration = [];
var analysisUnitInstance = Utils.SingleSetToElement(matrix.Matrix_Workspace.Workspace.Workspace_AnalysisUnit.Analysis_Unit);
VAR tableToUse = IIF(dataToUse=='actual', analysisUnitInstance.AnalyticalTable, analysisUnitInstance.BktestAnalyticalTable);
configuration['sourceTable'] = "(SELECT * FROM " + tableToUse + " t WHERE " + LIB_AnalysisUnit.getWorkspaceFilterSql(matrix.Matrix_Workspace.Workspace.ID);
if (fastTrack <> NULL) {
    VAR fastTrackClause = LIB_AnalysisUnit.getFastTrackClause(fastTrack, tableToUse);
    if (fastTrackClause <> NULL) {
        configuration['sourceTable'] = configuration['sourceTable'] + " AND NOT EXISTS ( " + fastTrackClause + " ) ";
    }
}
configuration['sourceTable'] = configuration['sourceTable'] + ")";
configuration['keyColumn'] = Utils.SingleSetToElement(analysisUnitInstance.AnalysisUnit_Variable.Variable[IsKeyColumn=TRUE].ColumnName);

var distance = 0;
var offset;
var xModel = Utils.SingleSetToElement(matrix.Matrix_Model[IsXAxis=TRUE]);
configuration['tableX'] = IIF(dataToUse=='actual', xModel.Model.ResultTableName, xModel.Model.ResultTableName + '_BKTEST');
configuration['scoreColX'] = xModel.Model.ModelColumnName;
if (matrix.XAxisWeight <> NULL) {
    distance = xModel.Model.MaxValue - xModel.Model.MinValue;
    offset = -xModel.Model.MinValue;
    configuration['tableX'] = "(select " + configuration['keyColumn'] + ", " + IIF(distance == 0, "0", "(" + configuration['scoreColX'] + "+" + offset + ")/" + distance) + " as " + configuration['scoreColX'] + " from " + configuration['tableX'] + ")";
    configuration['weightX'] = matrix.XAxisWeight;
}
var allXThresholdsTo = matrix.Matrix_Model[IsXAxis=TRUE].Matrix_Model_Threshold[From<>NULL].To ORDER BY [To DESC];

var yModel = Utils.SingleSetToElement(matrix.Matrix_Model[IsXAxis=FALSE]);
configuration['tableY'] = IIF(dataToUse=='actual', yModel.Model.ResultTableName, yModel.Model.ResultTableName + '_BKTEST');
configuration['scoreColY'] = yModel.Model.ModelColumnName;
if (matrix.XAxisWeight <> NULL) {
    distance = yModel.Model.MaxValue - yModel.Model.MinValue;
    offset = -yModel.Model.MinValue;
    configuration['tableY'] = "(select " + configuration['keyColumn'] + ", " + IIF(distance == 0, "0", "(" + configuration['scoreColY'] + "+" + offset + ")/" + distance) + " as " + configuration['scoreColY'] + " from " + configuration['tableY'] + ")";
    configuration['weightY'] = 1-matrix.XAxisWeight;
}
var allYThresholdsTo = matrix.Matrix_Model[IsXAxis=FALSE].Matrix_Model_Threshold[From<>NULL].To ORDER BY [To DESC];

var cells = {};
var cell = [];
var thId;
var x;
var y;

foreach (matrix.Matrix_Bin as bin) {
	cell = [];
	thId = bin.X;
    x = matrix.Matrix_Model.Matrix_Model_Threshold[ID=$thId];
    thId = bin.Y;
    y = matrix.Matrix_Model.Matrix_Model_Threshold[ID=$thId];
    PUT(cell, 'fromX', x.From);
    PUT(cell, 'toX', x.To);
    if (allXThresholdsTo[0] == x.To) {
    	PUT(cell, 'lastX', true);
    }
    PUT(cell, 'fromY', y.From);
    PUT(cell, 'toY', y.To);
    if (allYThresholdsTo[0] == y.To) {
    	PUT(cell, 'lastY', true);
    }
    PUT(cell, 'categoricalScore', bin.CategoricalScoreId);
    if (matrix.XAxisWeight <> NULL) {
        PUT(cell, 'matrixScore', IIF(x.To <> NULL AND y.To <> NULL, (matrix.XAxisWeight*x.To)+((1-matrix.XAxisWeight)*y.To), NULL));
    }
    else {
        PUT(cell, 'matrixScore', NULL);
    }

    ADDELEMENT(cells, cell);
}

configuration['cells'] = cells;

var result;

var adjConfiguration = {};
var categoricalScores = {};
var expressionSQLQuery;
foreach(matrix.Adjustment ORDER BY [OrderPosition] as adj){
    categoricalScores = {};
    foreach (adj.Adjustment_Swap.Category_Swap.[Category_Swap_Old.Categorical_Score.ID, Category_Swap_New.Categorical_Score.ID] ORDER BY [OrderPosition] as cs){
        ADDELEMENT(categoricalScores, [
            'from'  : cs[0],
            'to'    : cs[1]
        ]);
    }
    expressionSQLQuery = LIB_BRJson.getSQLquery(TEXTFILETOSTRING(adj.ExpressionQuery));
    ADDELEMENT(adjConfiguration, ['adjID': adj.ID, 'query': expressionSQLQuery, 'categoricalScores': categoricalScores]);
}

var selectedAdjustmentMode = iif(is_empty(matrix.AdjustmentMode), Matrix.getDefaultAdjustmentMode(analysisUnitInstance.ID), matrix.AdjustmentMode);
var calculationQueryWithAdj = LIB_AnalysisUnit.getMatrixAndAdjCalcQuery(adjConfiguration, configuration, selectedAdjustmentMode);

if (analysisUnitInstance.StoreIntermediateResults) {
    # Datasource
    VAR predictiveDatasourceName = Properties_Predictive[ID="PREDICTIVE_PROPERTIES"].PredictiveDatasourceName;

    # Drop table
    VAR resultTableName = matrix.ResultTableName + IIF(dataToUse == "actual", "", "_BKTEST");
    VAR tableName_New = resultTableName + "_NEW";
    VAR tableName_Bkp = resultTableName + "_BKP";
    VAR tableName = resultTableName;

    # Drop table
    VAR outcome = LIB_DB.DropTableIfExists(tableName_New, predictiveDatasourceName);
    DEBUGMESSAGE(formulaName, "Drop table " + tableName_New + ": " + PARSESTRING(outcome));

    # Create table new
    VAR dBDataType = LIB_DB.getDBRelatedStringType(['datasourceName' : predictiveDatasourceName]);
    VAR createTableQuery =
        " CREATE TABLE " + tableName_New + " (" +
        "  " + configuration['keyColumn'] + " " + dBDataType + "," +
        " CATEGORICAL_SCORE " + dBDataType + "," +
        " CONTINUOUS_SCORE " + LIB_DB.getDBRelatedNumberType(['datasourceName' : predictiveDatasourceName]) + "," +
        " MATRIX_SCORE " + LIB_DB.getDBRelatedNumberType(['datasourceName' : predictiveDatasourceName]) + "," +
        " ADJID " + dBDataType +
        " )";
    DEBUGMESSAGE(formulaName, "createTableQuery: " + createTableQuery);
    SQLEXECUTE(createTableQuery, predictiveDatasourceName,NULL,{});

    # Fill table new
    VAR insertQuery =
        "insert into " + tableName_New + " " + calculationQueryWithAdj;
    DEBUGMESSAGE(formulaName, "insertQuery:" + insertQuery);
    SQLEXECUTE("diagnostic noviewfold on for session; "+insertQuery, predictiveDatasourceName, NULL, {});

    LIB_DB.swapPreviousTableWithNewOneIfCorrect(tableName, tableName_Bkp, tableName_New, predictiveDatasourceName, analysisUnitInstance.ScoreTablesPath);

    result = tableName;
}
else  {
    result = " ( " + calculationQueryWithAdj + " ) ";
}

DEBUGMESSAGE(formulaName, "END");
RETURN result;
