VAR formulaName = "[LIB_EWS.getQueryOutputForWorkplace] ";
DEBUGMESSAGE(formulaName, "START");

VAR workspacePlan =  Param1;
#VAR workspacePlan = Workspace_Plan[ID="WSP000002"] ;

VAR workspacePlanId 		= workspacePlan.ID;
VAR fastTrackId 			= workspacePlan.WorkspacePlan_FastTrack.Fast_Track.ID;
VAR matrixId 			= workspacePlan.WorkspacePlan_Matrix.Matrix.ID;
VAR fastTrackInstance 	= Fast_Track[ID=$fastTrackId];
var workspaceInstance 	= workspacePlan.Workspace;
var workspaceId 			= workspaceInstance.ID;
VAR analysisUnitInstance 	= Utils.SingleSetToElement(workspaceInstance.Workspace_AnalysisUnit.Analysis_Unit);
VAR externalInfoFormula 	= analysisUnitInstance.CustomerInfoFormula;	

VAR AnalysisTable 		= analysisUnitInstance.AnalyticalTable;
VAR variables 			= analysisUnitInstance.AnalysisUnit_Variable.Variable order by [ColumnName ASC];

VAR SETUP 				= EVAL(externalInfoFormula, {analysisUnitInstance});
VAR HAVE_ERROR_MESSAGE 	= SETUP["HAVE_ERROR_MESSAGE"];
VAR DBCONNECTION 			= Properties_Predictive[ID="PREDICTIVE_PROPERTIES"].PredictiveDatasourceName;

VAR typeOfDataToUse 		= "actual";
VAR logActionName 		= "getQueryOutputForWorkplace";

VAR matrixInstance;
VAR models;
VAR adjustments;
VAR noneScore;
VAR calculateMatrixSQL;
VAR SQL;
VAR ERROR_SQL;
VAR configuration;
VAR tableFT;
VAR array = {};
VAR expressionSQLQuery;
VAR MATRIX_TABLE_ADJ;
VAR MATRIX_TABLE_NO_ADJ;
VAR modelColumns= {} ;
VAR tmp;
VAR fields;
VAR join;

VAR maxModel=5;
VAR maxException = 15;
var modelCount = 1;
VAR exceptionCount = 1;

SAVE_LOG("Info", logActionName, "START");
SAVE_LOG("Info", logActionName, "WORKSPACE "+workspacePlanId);

IF(matrixId <> null) {
 	matrixInstance 		= Matrix[ID=$matrixId];
 	models 				= matrixInstance.Matrix_Model.Model order by[NAME asc];
 	adjustments  		= matrixInstance.Adjustment ORDER BY [OrderPosition];
}

#DEFAULT FIELDS ##
fields 	= fields + AnalysisTable+".SNDG ";
fields 	= fields + ","+ AnalysisTable+".COUNTRY ";
tmp 		= "WS.CATEGORICAL_SCORE";
fields 	= fields + ","+tmp;
fields 	= fields + ",cast("+LIB_EWS.getSqlDecodeColors(tmp) +" as VARCHAR(50) ) as  SEMAFORO_APP";
fields 	= fields + ",CAST(null as VARCHAR(50)) as SEMAFORO_SYSTEM";

join = join +" LEFT JOIN (SELECT * FROM "+workspacePlan.ResultTableName +") ws ON WS.SNDG = "+AnalysisTable+".SNDG ";

##### RECUPERO FAST TRACK #####################
array = FastTrack.getCategoricalScoreInfo(fastTrackId);
tableFT = "TMP_FT_"+fastTrackId;
LIB_DB.DropTableIfExists(tableFT,DBCONNECTION);
SQLEXECUTE("CREATE TABLE "+tableFT+" AS ( "+ LIB_AnalysisUnit.getDecisionListCalculationQuery(array, analysisUnitInstance, typeOfDataToUse, workspaceId)  +" ) WITH DATA PRIMARY INDEX(SNDG)",DBCONNECTION,NULL,{});

fields 	= fields + ",cast( ( CASE WHEN FT.CATEGORICAL_SCORE = 'NONE' OR FT.CATEGORICAL_SCORE IS NULL THEN 0 ELSE 1 END) as VARCHAR(1) ) as  FAST_TRACK";
join 	= join +" LEFT JOIN "+tableFT+" FT  ON FT.SNDG="+AnalysisTable+".SNDG ";

##### RECUPERO I MODELLI #####################
foreach (models as model){
	join = join +" LEFT JOIN ( "+ LIB_EWS.getQueryScoreModel(model,matrixInstance) +")"+model.ID+" ON "+model.ID+".SNDG="+AnalysisTable+".SNDG";
	tmp = model.ID+".CATEGORICAL_SCORE";
    fields = fields +",CAST(CASE WHEN FAST_TRACK = 0 THEN "+LIB_EWS.getSqlDecodeColors(tmp)+" END as VARCHAR(50)) as RESULT_MODULE_0"+modelCount;
    addelement(modelColumns,"RESULT_MODULE_0"+modelCount);
	modelCount = modelCount+1;
	
}
while(modelCount<=maxModel){
	fields = fields +" ,CAST(null as VARCHAR(50)) as RESULT_MODULE_0"+modelCount;
	modelCount = modelCount + 1;
}

##### RECUPERO LA MATRICE #############
##NON CONSIDERO IL FAST_TRACK NEL CALCOLO #####
if(matrixInstance <> NULL ){
	VAR defaultMatrixTable = "(SELECT cast(null as varchar(16) ) as SNDG, cast(null as varchar(11) ) as CATEGORICAL_SCORE,  cast(null as integer ) as CONTINUOUS_SCORE,cast(null as integer ) as MATRIX_SCORE, cast(null as varchar(255) ) as ADJID )";
	
	MATRIX_TABLE_ADJ 		= matrixInstance.ResultTableName;
	MATRIX_TABLE_NO_ADJ 	= matrixInstance.ResultTableName+"NO_ADJ";
	
	configuration 	 	= LIB_EWS.getMatrixConfiguration(matrixInstance,null,typeOfDataToUse);
	calculateMatrixSQL 	= LIB_AnalysisUnit.getMatrixCalculationQuery(configuration,[]);
	LIB_DB.DropTableIfExists(MATRIX_TABLE_NO_ADJ,DBCONNECTION);
	SQLEXECUTE("CREATE MULTISET TABLE "+MATRIX_TABLE_NO_ADJ +" AS  "+ defaultMatrixTable +"  WITH DATA PRIMARY INDEX(SNDG)",DBCONNECTION,NULL,{});
	SQLEXECUTE("INSERT INTO "+MATRIX_TABLE_NO_ADJ +"  "+ calculateMatrixSQL ,DBCONNECTION,NULL,{});
	
	if(analysisUnitInstance.StoreIntermediateResults <> TRUE){
		calculateMatrixSQL = LIB_AnalysisUnit.calculateMatrix(matrixInstance,null,typeOfDataToUse);
		
		LIB_DB.DropTableIfExists(MATRIX_TABLE_ADJ,DBCONNECTION);
		SQLEXECUTE("CREATE MULTISET TABLE "+MATRIX_TABLE_ADJ +" AS  "+ defaultMatrixTable +"  WITH DATA PRIMARY INDEX(SNDG)",DBCONNECTION,NULL,{});
		
		calculateMatrixSQL = TRIM(calculateMatrixSQL);
		calculateMatrixSQL = SUBSTRING(calculateMatrixSQL, 1 ,LENGTH(calculateMatrixSQL) - 2 );		
		
		SQLEXECUTE("INSERT INTO "+MATRIX_TABLE_ADJ +"  "+ calculateMatrixSQL ,DBCONNECTION,NULL,{});
	}
		
	tmp 		= MATRIX_TABLE_ADJ +".CATEGORICAL_SCORE";
	fields 	= fields +" ,CAST(CASE WHEN FAST_TRACK = 0 THEN "+LIB_EWS.getSqlDecodeColors(tmp) +" END as VARCHAR(50)) as RESULT_FIRST_RISK_MATRIX";
	
	tmp 		= MATRIX_TABLE_ADJ +".CATEGORICAL_SCORE";
	#fields 	= fields +" ,CAST(CASE WHEN FAST_TRACK = 0 THEN "+LIB_EWS.getSqlDecodeColors(tmp) +" END as VARCHAR(50)) as MATRIX_RESULT";
	fields 	= fields +" ,CAST(CASE WHEN FAST_TRACK = 0 THEN "+LIB_EWS.getSqlDecodeColors(tmp) +" END as VARCHAR(50))as MATRIX_RESULT";
	
	join = join +" LEFT JOIN "+MATRIX_TABLE_NO_ADJ +" "+MATRIX_TABLE_NO_ADJ +" ON "+MATRIX_TABLE_NO_ADJ +".SNDG = "+AnalysisTable+".SNDG ";
	join = join +" LEFT JOIN "+MATRIX_TABLE_ADJ +" "+MATRIX_TABLE_ADJ +" ON "+MATRIX_TABLE_ADJ +".SNDG = "+AnalysisTable+".SNDG ";
}
else{
	fields = fields +" ,CAST(NULL as VARCHAR(50)) as MATRIX_RESULT";
	fields = fields +" ,CAST(NULL as VARCHAR(50)) as RESULT_FIRST_RISK_MATRIX";
}

##### RECUPERO ADJ #############
VAR adjMap=[];
foreach(adjustments as adj) {
	fields = fields +" ,CAST((CASE when "+MATRIX_TABLE_ADJ +".ADJID LIKE '%"+adj.ID+"%' AND FAST_TRACK = 0 then 1 when "+MATRIX_TABLE_ADJ +".ADJID NOT LIKE '%"+adj.ID+"%' AND FAST_TRACK = 0 then 0 END )as VARCHAR(50)) as EXCEPTION_"+(adj.OrderPosition+1);
	put(adjMap,"EXCEPTION_"+(adj.OrderPosition+1),adj);
	exceptionCount = exceptionCount + 1 ;
}

while(exceptionCount<=maxException){
	fields = fields +" ,CAST(null as VARCHAR(50)) as EXCEPTION_"+exceptionCount;
	exceptionCount = exceptionCount + 1 ;
}

##### CASE WHEN DETECTION RATIONALE #############
VAR detectionRationale = LIB_EWS.getDetectionRationaleValue(fastTrackInstance,'FAST_TRACK',adjMap,modelColumns); 
if(LENGTH(detectionRationale) == 0) then detectionRationale = 'NULL';
fields = fields +" ,CAST("+detectionRationale+" as VARCHAR(200)) as DETECTION_RATIONALE";

SQL = "SELECT ";
SQL = SQL + fields;
SQL = SQL +" FROM "+AnalysisTable +" "+AnalysisTable;
SQL = SQL + join;
SQL = SQL + " WHERE " +LIB_AnalysisUnit.getWorkspaceFilterSql(workspaceId);


DEBUGMESSAGE(formulaName, "END");
SAVE_LOG("Info", logActionName, "END");
return SQL;