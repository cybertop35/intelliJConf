var formulaName = "[VisualModeling.WeightedModelWoe] ";
DEBUGMESSAGE(formulaName, "START");

var nodeValue = Param1;
var inputs = Param2;
var visualModelingContext = Param3;

var prevVariables = inputs[0]['variables'];
var prevNodeTableName = inputs[0]['nodeTableName'];

var workspaceId = visualModelingContext['workspaceId'];
var analysisUnitId = visualModelingContext['analysisUnitId'];
var modelId = visualModelingContext['modelId'];
var sessionId = visualModelingContext['sessionId'];

var nodeInfo;
if (nodeValue == null) {
	var result = LIB_VMCommons.runEmptyNode("TRFWM_WOE", inputs);
	DEBUGMESSAGE(formulaName, "NODE VALUE NULL");
	DEBUGMESSAGE(formulaName, "END");
    return result;
}

var nodeName = nodeValue['nodeName'];
var nodeTableName = nodeValue['nodeTableName'];
var nodeStatus = LIB_VMCommons.getNodeStatus(nodeName, sessionId, modelId);
var updated = nodeStatus['updated'];
var variables = nodeStatus['variables'];
DEBUGMESSAGE(formulaName + ' updated : ', updated);

if (updated == false){
    # only if not yet created
    if (nodeValue['saved'] == NULL or nodeValue['saved'] == false) {
        LIB_VMCommons.insertSafeNodeTmpInfo(nodeName, nodeTableName, sessionId, modelId);
    }
    var predictiveDatasourceName = Properties_Predictive[ID="PREDICTIVE_PROPERTIES"].PredictiveDatasourceName;
    LIB_DB.DropTableIfExists(nodeTableName, predictiveDatasourceName);

    variables = CLONE(prevVariables);
	 
	var weightedModel = null;
	VAR dataVar = [];
	VAR statement;
	VAR weightedModelRows;
	VAR constantValue;
	VAR function;
	VAR continuousValues = [];
	VAR columName = 'Score_'+SUBSTRING(nodeTableName,LENGTH(nodeTableName)-6, 6);
	
	weightedModel 	= nodeValue["weightedModel"];
	weightedModelRows = weightedModel["weightedModelRows"];
	constantValue 	= weightedModel["constantValue"];
	function 		= weightedModel["function"];
		
	if(constantValue==NULL)
		constantValue=0;
	if(function==NULL)
		function = "";
	else
		function = function['value']; 
		
	#DEBUGMESSAGE(formulaName+" weightedModelRows:",weightedModelRows);
	#DEBUGMESSAGE(formulaName+" constantValue:",constantValue);
	#DEBUGMESSAGE(formulaName+" function:",function);
	
	VAR selectedColumn;
	VAR selectedValue;
	VAR EXPRESSION = "";
	var j=0;
	for(var i=0; i<size(variables); i=i+1){ 
		statement = statement +  variables[i]['columnName'];
		statement = statement + ",";
		
		for(j=0; j<size(weightedModelRows);j=j+1){
			if(weightedModelRows[j][0]["value"] <> null AND variables[i]['id'] == weightedModelRows[j][0]["value"]["value"] ){
				selectedColumn 	= variables[i]['columnName'];
				selectedValue 	= weightedModelRows[j][1]["inputValue"];
			
				EXPRESSION = EXPRESSION + "("+selectedColumn+" * ("+selectedValue+ "))+";
			}
		}
	}

	EXPRESSION = SUBSTRING(EXPRESSION,0,LENGTH(EXPRESSION) - 1 );
	
	PUT(dataVar, 'id', 			columName + "_WM");
	PUT(dataVar, 'columnName', 	columName + "_WM");
	PUT(dataVar, 'columnLabel',	columName + " New (WM Woe)");
	
	statement = statement + "CAST( "+function+"( "+constantValue + " + (" +EXPRESSION +" ) ) AS DECIMAL(36,6)) as " +dataVar['columnName'] ;
	
    # create result table
    var query = "CREATE TABLE " + nodeTableName + " AS ( SELECT " + statement + "  FROM " + prevNodeTableName +") WITH DATA PRIMARY INDEX(SNDG)";
	SQLEXECUTE(query, predictiveDatasourceName, null, {});
	
    DEBUGMESSAGE(formulaName + 'query=', query);
	
	query = "SELECT CASE WHEN MAX("+dataVar['columnName']+") is null then 0 else MAX("+dataVar['columnName']+") END,CASE WHEN MIN("+dataVar['columnName']+") is null then 0 else MIN("+dataVar['columnName']+") END FROM " + nodeTableName;
	DEBUGMESSAGE(formulaName + 'query=', query);
	VAR resulSet = SQLEXECUTE(query, predictiveDatasourceName, null, {});
	
	DEBUGMESSAGE(formulaName + 'resulSet[0]=', resulSet[0][0]);
	if(resulSet[0] <> null and SIZE(resulSet[0]) > 0)
		continuousValues = ['min':resulSet[0][0],'max':resulSet[0][1]];
	else
		continuousValues = ['min':0,'max':0];
		
	PUT(dataVar, 'continuousValues',continuousValues);
	PUT(dataVar, 'variableType', 	'CONTINUOUS');
	PUT(dataVar, 'dataType', 		'REAL');
	PUT(dataVar, 'isHiddenColumn',	false);
	PUT(dataVar, 'isKeyColumn', 	false);
	PUT(dataVar, 'isTargetColumn', false);
	PUT(dataVar, 'isSegment', 		false);
	
	ADDELEMENT(variables, dataVar);

    LIB_VMCommons.setNodeStatus(nodeName, ['updated': true, 'variables': variables], sessionId, modelId);
}

# creating output result
var result = [
    'nodeName'      : nodeName,
    'nodeTableName' : nodeTableName,
    'variables'     : variables
];

DEBUGMESSAGE(formulaName, "END");
return result;
