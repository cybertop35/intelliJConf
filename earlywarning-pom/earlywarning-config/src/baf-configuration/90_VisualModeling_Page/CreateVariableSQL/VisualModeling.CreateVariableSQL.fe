VAR formulaName = "[VisualModeling.CreateVariableSQL] ";
DEBUGMESSAGE(formulaName, "START");

var nodeValue = Param1;
var inputs = Param2;
var visualModelingContext = Param3;

var prevVariables = inputs[0]['variables'];
var prevNodeTableName = inputs[0]['nodeTableName'];

var workspaceId = visualModelingContext['workspaceId'];
var analysisUnitId = visualModelingContext['analysisUnitId'];
var modelId = visualModelingContext['modelId'];
var sessionId = visualModelingContext['sessionId'];

if(nodeValue == null) {
	var result = LIB_VMCommons.runEmptyNode("CNVAR", inputs);
	DEBUGMESSAGE(formulaName, "NODE VALUE NULL");
	DEBUGMESSAGE(formulaName, "END");
    return result;
}

var nodeName = nodeValue['nodeName'];
var nodeTableName = nodeValue['nodeTableName'];
var nodeStatus = LIB_VMCommons.getNodeStatus(nodeName, sessionId, modelId);
var updated = nodeStatus['updated'];
var variables = nodeStatus['variables'];
DEBUGMESSAGE(formulaName + ' updated : ', updated);

if (updated == false){
    # only if not yet created
    if (nodeValue['saved'] == NULL or nodeValue['saved'] == false) {
        LIB_VMCommons.insertSafeNodeTmpInfo(nodeName, nodeTableName, sessionId, modelId);
    }

    var nodeTableNameR = nodeValue['nodeTableName'] + "_R";
    var variableColumnName = nodeValue['variableColumnName'];
    variables = CLONE(prevVariables);

    var rOutput = CreateVariableSQL.executeRcode(nodeValue, inputs, visualModelingContext);

    var predictiveDatasourceName = Properties_Predictive[ID="PREDICTIVE_PROPERTIES"].PredictiveDatasourceName;
    LIB_DB.DropTableIfExists(nodeTableName,predictiveDatasourceName);
    var sqlCreateNodeTable =
        " CREATE TABLE " + nodeTableName + " AS " +
        " SELECT t1.*, t2." + variableColumnName +
        " FROM " +
        "  " + inputs[0]['nodeTableName'] + " t1" +
        " LEFT JOIN " + nodeTableNameR    + " t2" +
        " ON t1." + nodeValue['keyColumn'] + " = t2." + nodeValue['keyColumn'];
    SQLEXECUTE(sqlCreateNodeTable, predictiveDatasourceName, 0, {});

    var categoricalValues = {};
    var continuousValues = [];
    var query;
    var queryResult;
    if (nodeValue['variableType']=='CONTINUOUS') {
        query = 'select min(' + variableColumnName + '), max(' + variableColumnName + ') from ' + nodeTableName;
        queryResult = SQLEXECUTE(query, predictiveDatasourceName, 0, {});
        continuousValues['min'] = queryResult[0][0];
        continuousValues['max'] = queryResult[0][1];
    } else {
        query = 'select distinct ' + variableColumnName + ' from ' + nodeTableName + ' where ' + variableColumnName + ' is not null order by ' + variableColumnName;
        queryResult = SQLEXECUTE(query, predictiveDatasourceName, 0, {});
        categoricalValues = Utils.arrayOfSingleSetToArrayOfElement(queryResult);
    }

    var newVariableInfoMap = [
        'id' : nodeValue['variableColumnName'],
        'columnName' : nodeValue['variableColumnName'],
        'columnLabel' : nodeValue['variableLabelName'],
        'dataType' : nodeValue['variableDataType'],
        'variableType' : nodeValue['variableType'],
        'isHiddenColumn' : false,
        'isKeyColumn' : false,
        'isTargetColumn' : false,
        'isSegment' : false,
        'isPartitioningColumn' : false,
        'isEmptyContinuousVariable' : false,
        'categoricalValues' : categoricalValues,
        'continuousValues' : continuousValues
    ];
    ADDELEMENT(variables, newVariableInfoMap);
}

# creating output result
var result = [
    'nodeName'      : nodeName,
    'nodeTableName' : nodeTableName,
    'variables'     : variables
];

DEBUGMESSAGE(formulaName, "END");
return result;

