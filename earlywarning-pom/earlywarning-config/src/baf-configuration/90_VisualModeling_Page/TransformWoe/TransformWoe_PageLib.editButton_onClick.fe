var formulaName = "[TransformWoe_PageLib.editButton_onClick] ";
DEBUGMESSAGE(formulaName, "START");

var user = Param1;
var routerMap = Param2;
var symbolTable	= Param3;
var thresholdsMap = symbolTable["thresholds"];
var variablesInfo = symbolTable["variablesInfo"];
var variableId = symbolTable["selectedRow"][3];
var variableType = symbolTable["selectedRow"][1];
var minYModelValue = 0;
var maxYModelValue = 0;
var thresholds = {};
var widget = NULL;
var VAL_CATEGORICAL = null;
var isCategorical = false;
var selectedValueToggleButton = {"Continuous"};
var distincValues = {};

variableId = variableId["value"];
variableType = variableType["label"];

if(thresholdsMap == NULL OR thresholdsMap[variableId] == NULL){
	thresholdsMap = [];
	
} else {

	isCategorical = thresholdsMap[variableId]['isCategorical'];
	
	if (isCategorical){
		selectedValueToggleButton = {"Categorical"};
	}
}
 
var widgets = {
	
	[
        'widgetId'  :   'popupConfigureTitle',
        'name'		:   'output',
        'value'	    :   ['label' : 'Configure Threshold', 'class': 'un-body2-bold ux-text-grey-p2'],
        'position'	:   '#configureTitlePH'
    ],
	[
		'widgetId':'buttonCancel',
		'name':'actionButton',
		'value':[ 'label' : 'Cancel', 'skin' : ['color' : 'blue', 'size' : 'standard']],
		'position':'#cancelButtonPH'
	],
	[
		'widgetId':'buttonSave',
		'name':'actionButton',
		'value':[ 'label' : 'Save', 'skin' : ['color' : 'green', 'size' : 'standard']],
		'position':'#saveButtonPH'
	]
};


if(variableType == "CONTINUOUS" ) {

	var toggleButtonGroup = [
	    'widgetId': 'toggleButtonGroup',
	    'name': 'toggleButtonGroup',
	    'value':[
	        'isMultipleSelectionEnabled': FALSE,
	        'values' : {"Continuous", "Categorical"},
	        'selectedValues' : selectedValueToggleButton,
	        'eventType' : 'refresh'
	    ],
	    'position':'#toggleButtonGroupPositionPH'
	];

	ADDELEMENT(widgets, toggleButtonGroup);
	thresholds = {};

	if (thresholdsMap[variableId] == NULL){
		
		ADDELEMENT(thresholds, ['index': 0, 'EqualsMin': false, 'from' : 0, 'EqualsMax': false, 'to' :0 , 'score' : UPCASE('NEW VALUE...'), 'labelColor': 'grey-m3']);
	
		isCategorical = false;
	}
	else {
		thresholds = thresholdsMap[variableId]['values'];
		isCategorical = thresholdsMap[variableId]['isCategorical'];
	}

	widget = [	"widgetId"  : "widgetsGridPH",
				"name"      : "thresholdsGridWoa",
				"value"     : [
					'thresholds': thresholds,
					'maxHeight': 257,
					'maxThresholdsNumber': 10,
					'defaultThresholdName': UPCASE('NEW VALUE') + '...',
					'minValue': minYModelValue,
					'maxValue': maxYModelValue,
					'minValueMessage': 'Min Value: ' + minYModelValue,
					'maxValueMessage': 'Max Value: ' + maxYModelValue,
					'isCategorical': isCategorical
				],
				"position"  : "#widgetsGridPH"
			];		
	addelement(widgets,widget);
}

if(variableType == "CATEGORICAL") {
	thresholds = {};

	if (thresholdsMap[variableId] == NULL){

		foreach(variablesInfo as variable){
			
			if(variable["id"] == variableId ){
				distincValues = variable["categoricalValues"];

				foreach(distincValues as val){
					if (val == '0'){ 
						VAL_CATEGORICAL = 'FALSE';
					} else if(val == '1'){ 
						VAL_CATEGORICAL = 'TRUE';
					} else{
						VAL_CATEGORICAL = val;
					}
					ADDELEMENT(thresholds,{['label': VAL_CATEGORICAL], ['inputValue': 0]});
				}	
			}
		}
	}
	else{
		thresholds = thresholdsMap[variableId]['values'];
	}
	
	widget = [	'widgetId':'widgetsGridPH',
				'name':'dataTable',
				'value':[
					'height':250,
					'columns': {
						['headerLabel': "Category", 'headerStyle':"text-center", 'widgetName':"output", 'widgetParameters': ["class":"ux-body2 ux-text-grey"]],
						['headerLabel': "Score", 'headerStyle':"text-center", 'widgetName':"numberInput"]
					},
					'values': thresholds
				],
				'position':'#widgetsGridPH'
			];
	addelement(widgets,widget);
}

var popup = {[
    "widgetId": "popupConfigureWoe",
    "name": 	"template",
    "value": [
        'show': 	true,
        'popup': 	true,
        'layout': 	'pages/layouts/popupConfigureWoe/',
        'widgets': 	widgets
    ],
    "position" : "#editPopup"
]};

DEBUGMESSAGE(formulaName, "END");
return ['widgets': popup, 'widgetsToRemove': {}];