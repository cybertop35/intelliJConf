var formulaName = "[VisualModeling.TransformWoe] ";
DEBUGMESSAGE(formulaName, "START");

var nodeValue = Param1;
var inputs = Param2;
var visualModelingContext = Param3;
var prevVariables = inputs[0]['variables'];
var prevNodeTableName = inputs[0]['nodeTableName'];
var workspaceId = visualModelingContext['workspaceId'];
var analysisUnitId = visualModelingContext['analysisUnitId'];
var modelId = visualModelingContext['modelId'];
var sessionId = visualModelingContext['sessionId'];
var nodeInfo;

if (nodeValue == null) {
	var result = LIB_VMCommons.runEmptyNode("TRFWOE", inputs);
	DEBUGMESSAGE(formulaName, "NODE VALUE NULL");
	DEBUGMESSAGE(formulaName, "END");
    return result;
}

var nodeName = nodeValue['nodeName'];
var nodeTableName = nodeValue['nodeTableName'];
var nodeStatus = LIB_VMCommons.getNodeStatus(nodeName, sessionId, modelId);
var updated = nodeStatus['updated'];
var variables = nodeStatus['variables'];

if (updated == false){

    if (nodeValue['saved'] == NULL or nodeValue['saved'] == false) {
        LIB_VMCommons.insertSafeNodeTmpInfo(nodeName, nodeTableName, sessionId, modelId);
    }
    var predictiveDatasourceName = Properties_Predictive[ID="PREDICTIVE_PROPERTIES"].PredictiveDatasourceName;
    LIB_DB.DropTableIfExists(nodeTableName, predictiveDatasourceName);

    variables = CLONE(prevVariables);

	var thresholds = nodeValue['thresholds'];
	var dataVar;
	var newVariables = {};
	var continuousValuesTMP = {};
	var distinctValues = {};
	var continuousValues = [];
	var isCategorical = false;
	var thresholdConf;
	var statement;
	var min;
	var max;
	var EqualsMin = null ;
	var EqualsMax = null ;
	var OperatorMin = '>';
	var OperatorMax = '<';
	var VAL_CATEGORICAL = null;
	var val_flag = null ;	

	for(var i=0; i<size(variables); i=i+1){ 
		
		statement = statement +  variables[i]['columnName'];
		statement = statement + ",";
	
		if(thresholds <> null) {
			FOREACHKEY(thresholds as key){

				if (variables[i]['id'] == key) {
					
					dataVar = [];				
					put(dataVar,'id', variables[i]['id'] + "_WOE");
					put(dataVar,'columnName',variables[i]['columnName'] + "_WOE");
					put(dataVar,'columnLabel',variables[i]['columnLabel'] + " New (Woe)");
					put(dataVar,'isHiddenColumn',false);
					put(dataVar,'isKeyColumn',false);
					put(dataVar,'isTargetColumn',false);
					put(dataVar,'isSegment',false);

					continuousValuesTMP = {};
					continuousValues = [];
					thresholdConf = thresholds[key]['values'];
					isCategorical = thresholds[key]['isCategorical'];
					
					if(isCategorical){

						put(dataVar,'variableType','CATEGORICAL');
						put(dataVar,'dataType','STRING');						
					} else {

						put(dataVar,'variableType','CONTINUOUS');
						put(dataVar,'dataType','REAL');
					}

					if(variables[i]['variableType'] ==  'CONTINUOUS'){
						
						statement = statement + " CASE ";

						foreach( thresholdConf as conf ){
											
							EqualsMin = conf["EqualsMin"];
							EqualsMax = conf["EqualsMax"];
						
							if (EqualsMin == TRUE) { OperatorMin = '>=' ; } else { OperatorMin = '>' ; }
							if (EqualsMax == TRUE) { OperatorMax = '<=' ; } else { OperatorMax = '<' ; }
						
							if(isCategorical == false){
								statement = statement + " WHEN " + variables[i]['columnName'] + OperatorMin +conf["from"] +" and "+ variables[i]['columnName'] + OperatorMax +conf["to"]+ " THEN "+conf["score"];
								addelement(continuousValuesTMP,NUM(conf["score"]));
							} else {

								statement = statement + " WHEN " + variables[i]['columnName'] + OperatorMin +conf["from"] +" and "+ variables[i]['columnName'] + OperatorMax +conf["to"]+ " THEN '"+conf["score"] + "'";
								addelement(distinctValues,(conf["score"]));
							}
							DEBUGMESSAGE('QUERY: ',statement);
						}
						statement = statement +" else NULL";
						statement = statement + " END AS " + variables[i]['columnName'] + "_WOE";
					}

					else if(variables[i]['variableType'] == 'CATEGORICAL'){
						
						isCategorical = false;
						statement = statement + " CASE ";

						foreach( thresholdConf as conf ){
						
							val_flag=conf[0]["label"];
						
							if(val_flag=='TRUE'){ 

								VAL_CATEGORICAL='0';
							} else if(val_flag=='TRUE'){

								VAL_CATEGORICAL='1';
							} else{

								VAL_CATEGORICAL=val_flag;
							}
							statement=statement + " WHEN " + variables[i]['columnName'] + " = '" + VAL_CATEGORICAL +"' THEN "+conf[1]["inputValue"];
							addelement(continuousValuesTMP,(conf[1]["inputValue"]));
						}			
						statement = statement + " END AS " + variables[i]['columnName'] + "_WOE";					
					}
					statement = statement + ",";
						
					if(isCategorical == false){

						min = MIN(continuousValuesTMP);
						max = MAX(continuousValuesTMP);	
						
						if(min == max){
						
							max = max +1;
						}

						continuousValues = ['min':min,'max':max];
						put(dataVar,'continuousValues',continuousValues);
					} else {

						put(dataVar,'categoricalValues',distinctValues);
					}
					ADDELEMENT(newVariables, dataVar);
				}	
			}		
		}
	}
	
	variables = CONCAT(variables, newVariables);
	statement = SUBSTRING(statement,0,LENGTH(statement) - 1);
    var query = "CREATE TABLE " + nodeTableName + " AS ( SELECT  " + statement + "  FROM " + prevNodeTableName +" t ) WITH DATA PRIMARY INDEX(SNDG)";
	DEBUGMESSAGE(formulaName + 'QYERY: ', query);
	SQLEXECUTE(query, predictiveDatasourceName, null, {});
	LIB_VMCommons.setNodeStatus(nodeName, ['updated': true, 'variables': variables], sessionId, modelId);
}

var result = [
    'nodeName'      : nodeName,
    'nodeTableName' : nodeTableName,
    'variables'     : variables
];

DEBUGMESSAGE(formulaName, "END");
return result;
